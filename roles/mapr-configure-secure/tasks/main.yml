---
# Configure unsecure cluster

- name: Get Zookeeper FQDNs
  set_fact: zoo_item={{ hostvars[item]['ansible_fqdn'] }}
  with_items:
    - "{{ groups['mapr-zookeeper'] }}"
  register: zookeeper_hosts
- name: Make Zookeeper String
  set_fact: zookeeper_string={{ zookeeper_hosts.results | map(attribute='ansible_facts.zoo_item') | list | join(',')}}

- name: Get CLDB FQDNs
  set_fact: cldb_item={{ hostvars[item]['ansible_fqdn'] }}
  with_items:
    - "{{ groups['mapr-cldb'] }}"
  register: cldb_hosts
- name: Make CLDB String
  set_fact: cldb_string={{ cldb_hosts.results | map(attribute='ansible_facts.cldb_item') | list | join(',')}}

- name: Get Job History Server
  set_fact: historyserver_item={{ hostvars[item]['ansible_fqdn'] }}
  with_items:
    - "{{ groups['mapr-historyserver'] }}"
  register: historyserver_hosts
- name: Make History Server String
  set_fact: historyserver_string={{ historyserver_hosts.results | map(attribute='ansible_facts.historyserver_item') | list | join(',')}}

- name: Get Resource Manager
  set_fact: resourcemanager_item={{ hostvars[item]['ansible_fqdn'] }}
  with_items:
    - "{{ groups['mapr-resourcemanager'] }}"
  register: resourcemanager_hosts
- name: Make Resource Manager String
  set_fact: resourcemanager_string={{ resourcemanager_hosts.results | map(attribute='ansible_facts.resourcemanager_item') | list | join(',')}}

- name: Check if mapr-clusters.conf already exists, if not run configure.sh prior to run disksetup
  stat: path=/opt/mapr/conf/mapr-clusters.conf
  register: p

# Configure secure cluster
#- name: Enable customer security by creating /opt/mapr/conf/.customSecure
#  file: path=/opt/mapr/conf/.customSecure state=touch mode=0644
- name: Check if /opt/mapr/conf/cldb.key exists
  stat: path=/opt/mapr/conf/cldb.key
  register: cldb_key_status

- name: Configure.sh to generate keys only run on first mapr-cldb node
  shell: /opt/mapr/server/configure.sh -N {{ cluster_name }} -Z {{ zookeeper_string }} -C {{ cldb_string }} -u {{ mapr_user }} -g {{ mapr_group }} -genkeys -secure
  when: inventory_hostname == groups["mapr-cldb"][0] and not cldb_key_status.stat.exists

- name: Copy keys to local
  fetch: src=/opt/mapr/conf/{{ item }} dest=/tmp/{{ item }} flat=yes
  with_items:
  - maprserverticket
  - cldb.key
  - ssl_keystore
  - ssl_truststore
  when: inventory_hostname == groups["mapr-cldb"][0]

- name: Copy keys to all nodes
  copy: src=/tmp/{{ item }} dest=/opt/mapr/conf/{{ item }}
  with_items:
  - maprserverticket
  - cldb.key
  - ssl_keystore
  - ssl_truststore
 # copy to other nodes

 # run configure on other nodes
- name: Configure.sh secure
  shell: /opt/mapr/server/configure.sh -N {{ cluster_name }} -Z {{ zookeeper_string }} -C {{ cldb_string }} -u {{ mapr_user }} -g {{mapr_group}} -secure
  when: not p.stat.exists

- name: Write disk tmp file
  shell: echo {{ disks }} | tr , '\n' > /tmp/disks.txt
- name: Disk setup
  command: /opt/mapr/server/disksetup -F /tmp/disks.txt
  ignore_errors: True # TODO error result should be handeled

- name: Configure.sh secure
  shell: /opt/mapr/server/configure.sh -N {{ cluster_name }} -Z {{ zookeeper_string }} -C {{ cldb_string }} -u {{ mapr_user }} -g {{mapr_group}} -secure



